{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Description Corporate wiki chatbot implementation of a RAG-based LLM. Commands The Makefile contains the central entry points for common tasks related to this project. make - List all available functions make create_environment - Create the project environment using conda make update_environment - Update the project environment make clean - Delete all compiled Python files make lint - Lint using flake8 and black (use make format to do formatting) make format - Format source code with black Project Organization \u251c\u2500\u2500 Makefile <- Makefile with convenience commands like `make create_environment` or `make format` \u251c\u2500\u2500 README.md <- The top-level README for developers using this project. \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 interim <- Intermediate data that has been transformed. \u2502 \u251c\u2500\u2500 processed <- The final, canonical data sets for modeling. \u2502 \u2514\u2500\u2500 raw <- The original, immutable data dump. \u2502 \u251c\u2500\u2500 docs <- A default mkdocs project; see mkdocs.org for details \u2502 \u251c\u2500\u2500 notebooks <- Jupyter notebooks. Naming convention is a number (for ordering), \u2502 the creator's initials, and a short `-` delimited description, e.g. \u2502 `1.0-jqp-initial-data-exploration`. \u2502 \u251c\u2500\u2500 pyproject.toml <- Project configuration file with package metadata for the project \u2502 and configuration for tools like black \u2502 \u251c\u2500\u2500 references <- Data dictionaries, manuals, and all other explanatory materials. \u2502 \u251c\u2500\u2500 environment.yml <- The requirements file for reproducing the virtual environment, e.g. \u2502 generated with `conda env create -f environment.yml` \u2502 \u251c\u2500\u2500 setup.cfg <- Configuration file for flake8 \u2502 \u2514\u2500\u2500 ragged_llama <- Source code for use in this project. \u2502 \u251c\u2500\u2500 __init__.py <- Makes ragged_llama a Python module \u2502 \u251c\u2500\u2500 data <- Scripts to download or generate data \u2502 \u2514\u2500\u2500 make_dataset.py \u2502 \u2514\u2500\u2500 features <- Scripts to turn raw data into features for modeling \u2514\u2500\u2500 build_features.py","title":"Home"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#description","text":"Corporate wiki chatbot implementation of a RAG-based LLM.","title":"Description"},{"location":"#commands","text":"The Makefile contains the central entry points for common tasks related to this project. make - List all available functions make create_environment - Create the project environment using conda make update_environment - Update the project environment make clean - Delete all compiled Python files make lint - Lint using flake8 and black (use make format to do formatting) make format - Format source code with black","title":"Commands"},{"location":"#project-organization","text":"\u251c\u2500\u2500 Makefile <- Makefile with convenience commands like `make create_environment` or `make format` \u251c\u2500\u2500 README.md <- The top-level README for developers using this project. \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 interim <- Intermediate data that has been transformed. \u2502 \u251c\u2500\u2500 processed <- The final, canonical data sets for modeling. \u2502 \u2514\u2500\u2500 raw <- The original, immutable data dump. \u2502 \u251c\u2500\u2500 docs <- A default mkdocs project; see mkdocs.org for details \u2502 \u251c\u2500\u2500 notebooks <- Jupyter notebooks. Naming convention is a number (for ordering), \u2502 the creator's initials, and a short `-` delimited description, e.g. \u2502 `1.0-jqp-initial-data-exploration`. \u2502 \u251c\u2500\u2500 pyproject.toml <- Project configuration file with package metadata for the project \u2502 and configuration for tools like black \u2502 \u251c\u2500\u2500 references <- Data dictionaries, manuals, and all other explanatory materials. \u2502 \u251c\u2500\u2500 environment.yml <- The requirements file for reproducing the virtual environment, e.g. \u2502 generated with `conda env create -f environment.yml` \u2502 \u251c\u2500\u2500 setup.cfg <- Configuration file for flake8 \u2502 \u2514\u2500\u2500 ragged_llama <- Source code for use in this project. \u2502 \u251c\u2500\u2500 __init__.py <- Makes ragged_llama a Python module \u2502 \u251c\u2500\u2500 data <- Scripts to download or generate data \u2502 \u2514\u2500\u2500 make_dataset.py \u2502 \u2514\u2500\u2500 features <- Scripts to turn raw data into features for modeling \u2514\u2500\u2500 build_features.py","title":"Project Organization"},{"location":"getting-started/","text":"Getting started This is where you describe how to get set up on a clean install, including the commands necessary to get the raw data (using the sync_data_from_s3 command, for example), and then how to make the cleaned, final data sets.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"This is where you describe how to get set up on a clean install, including the commands necessary to get the raw data (using the sync_data_from_s3 command, for example), and then how to make the cleaned, final data sets.","title":"Getting started"},{"location":"list-of-tools/","text":"Tools This is a list of libraries, packages or modules that I learnt about as part of this project. They're organised by categories. Python project organisation Make - Using custom commands defined in a Makefile can simplify and automate repetitive tasks in your project. We use it to build and update the virtual environment and to reformat files to PEP8 style. On Windows, need to install make first: Install make using choco . Shields.is - This is where repositories get all their badges from. Cookiecutter - data science - Makes it easy to create a folder and file structure for data science projects. They also have a lot of useful general advice for managing data science projects including using .gitignore, virtual environments and managing secrets. Mkdocs - This seems to be the preferred way of managing project documentation. It was also recommended by the Lead Data Scientist at Lloyds Banking Group at the Data Science Festival in London in May 2024. Open-source and free. The \"Wiki\" feature on GitHub is paid and README.md documents don't support multiple pages. Code formatting flake8 - Flake8 lints the code for errors, style violations, and complexity issues. It reports issues but it doesn't update the files. It has many customization options. ( More ) black - Black is an opinionated code formatter for Python. Its primary goal is to enforce a consistent coding style across the entire codebase, reducing the need for debates about formatting in code reviews. It makes changes to the code to enforce a standard. It has few customization options. ( More ) isort - Groups and sorts Python imports so that you don't have to.","title":"Tools"},{"location":"list-of-tools/#tools","text":"This is a list of libraries, packages or modules that I learnt about as part of this project. They're organised by categories.","title":"Tools"},{"location":"list-of-tools/#python-project-organisation","text":"Make - Using custom commands defined in a Makefile can simplify and automate repetitive tasks in your project. We use it to build and update the virtual environment and to reformat files to PEP8 style. On Windows, need to install make first: Install make using choco . Shields.is - This is where repositories get all their badges from. Cookiecutter - data science - Makes it easy to create a folder and file structure for data science projects. They also have a lot of useful general advice for managing data science projects including using .gitignore, virtual environments and managing secrets. Mkdocs - This seems to be the preferred way of managing project documentation. It was also recommended by the Lead Data Scientist at Lloyds Banking Group at the Data Science Festival in London in May 2024. Open-source and free. The \"Wiki\" feature on GitHub is paid and README.md documents don't support multiple pages.","title":"Python project organisation"},{"location":"list-of-tools/#code-formatting","text":"flake8 - Flake8 lints the code for errors, style violations, and complexity issues. It reports issues but it doesn't update the files. It has many customization options. ( More ) black - Black is an opinionated code formatter for Python. Its primary goal is to enforce a consistent coding style across the entire codebase, reducing the need for debates about formatting in code reviews. It makes changes to the code to enforce a standard. It has few customization options. ( More ) isort - Groups and sorts Python imports so that you don't have to.","title":"Code formatting"}]}